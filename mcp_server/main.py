# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:00:31+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    CtcerCertificatePostRequest,
    CtcerCertificatePostResponse,
    CtcerCertificatePostResponse1,
    CtcerCertificatePostResponse2,
    CtcerCertificatePostResponse3,
    CtcerCertificatePostResponse4,
    CtcerCertificatePostResponse5,
    CtcerCertificatePostResponse6,
    EwcerCertificatePostRequest,
    EwcerCertificatePostResponse,
    EwcerCertificatePostResponse1,
    EwcerCertificatePostResponse2,
    EwcerCertificatePostResponse3,
    EwcerCertificatePostResponse4,
    EwcerCertificatePostResponse5,
    EwcerCertificatePostResponse6,
    LhcerCertificatePostRequest,
    LhcerCertificatePostResponse,
    LhcerCertificatePostResponse1,
    LhcerCertificatePostResponse2,
    LhcerCertificatePostResponse3,
    LhcerCertificatePostResponse4,
    LhcerCertificatePostResponse5,
    LhcerCertificatePostResponse6,
    ObcerCertificatePostRequest,
    ObcerCertificatePostResponse,
    ObcerCertificatePostResponse1,
    ObcerCertificatePostResponse2,
    ObcerCertificatePostResponse3,
    ObcerCertificatePostResponse4,
    ObcerCertificatePostResponse5,
    ObcerCertificatePostResponse6,
    Ror1bCertificatePostRequest,
    Ror1bCertificatePostResponse,
    Ror1bCertificatePostResponse1,
    Ror1bCertificatePostResponse2,
    Ror1bCertificatePostResponse3,
    Ror1bCertificatePostResponse4,
    Ror1bCertificatePostResponse5,
    Ror1bCertificatePostResponse6,
    SlcerCertificatePostRequest,
    SlcerCertificatePostResponse,
    SlcerCertificatePostResponse1,
    SlcerCertificatePostResponse2,
    SlcerCertificatePostResponse3,
    SlcerCertificatePostResponse4,
    SlcerCertificatePostResponse5,
    SlcerCertificatePostResponse6,
)

app = MCPProxy(
    description="eDistrict Odisha (http://edistrictodisha.gov.in/) is the online service delivery portal for Odisha State Govt. Certain documents issued by it (e.g. Income, Caste, Residence Certificates etc) are made available in citizens' DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='eDistrict Odisha, Odisha',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/edistrictodisha/v3'}],
)


@app.post(
    '/ctcer/certificate',
    description=""" API to verify Caste Certificate. """,
    tags=['certificate_administration'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ctcer(body: CtcerCertificatePostRequest = None):
    """
    Caste Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ewcer/certificate',
    description=""" API to verify Economically Weaker Section Certificate. """,
    tags=['certificate_administration'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ewcer(body: EwcerCertificatePostRequest = None):
    """
    Economically Weaker Section Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/lhcer/certificate',
    description=""" API to verify Legal Heir Certificate. """,
    tags=['certificate_administration'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def lhcer(body: LhcerCertificatePostRequest = None):
    """
    Legal Heir Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/obcer/certificate',
    description=""" API to verify OBC Certificate. """,
    tags=['certificate_administration'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def obcer(body: ObcerCertificatePostRequest = None):
    """
    OBC Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ror1b/certificate',
    description=""" API to verify Records of Rights. """,
    tags=['certificate_administration'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def ror1b(body: Ror1bCertificatePostRequest = None):
    """
    Records of Rights
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/slcer/certificate',
    description=""" API to verify Solvency Certificate. """,
    tags=['certificate_administration'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def slcer(body: SlcerCertificatePostRequest = None):
    """
    Solvency Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
